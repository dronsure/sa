#!/usr/bin/expect

# we defined a proc return 1 to true, reutrn 0 to false

# global config variables
global CONFIG_DIR
global SSH_IDS_DIR
set CONFIG_DIR  $::env(HOME)/.sa
set SSH_IDS_DIR $CONFIG_DIR/ids

# global color variables
global RED_S
global WHITE_S
global COLOR_E
set WHITE_S "\033\[01;37m"
set RED_S   "\033\[01;91m"
set COLOR_E "\033\[0m"

# global ssh command
global SSH_COMMAND
set SSH_COMMAND "zssh"

proc isnumeric {value} {
    if {![catch {expr {abs($value)}}]} {
        return 1
    }
    set value [string trimleft $value 0]
    if {![catch {expr {abs($value)}}]} {
        return 1
    }
    return 0
}

proc add_server {servername_a hostname_a port_a username_a password_a idfile_a passphrase_a} {
    global CONFIG_DIR
    global RED_S
    global COLOR_E
    
    set servers [get_server_config]

    # check if already exists
    if {[dict exists $servers $servername_a]} {
	puts -nonewline "${RED_S}Warning, server ${servername_a} already exists, overwrite it?(Y/n):"
	flush stdout
	set overwrite [gets stdin]
	
	if {$overwrite != "Y" && $overwrite != "y"} {
	    puts "${RED_S}Cancled.${COLOR_E}"
	    return 0
	}
    }
    
    set outfile [open "$CONFIG_DIR/config.tcl" w]
    
    dict for {servername info} $servers {
	dict with info {
	    if {$servername == $servername_a} {
		continue
	    }
	    
	    puts $outfile "set server_name $servername"
	    puts $outfile "dict set servers \$server_name hostname    \"${hostname}\""
	    puts $outfile "dict set servers \$server_name port        \"${port}\""
	    puts $outfile "dict set servers \$server_name username    \"${username}\""
	    puts $outfile "dict set servers \$server_name password    \"${password}\""
	    puts $outfile "dict set servers \$server_name idfile      \"${idfile}\""
	    puts $outfile "dict set servers \$server_name passphrase  \"${passphrase}\""
	}
    }

    set idfile_name ""

    if {$idfile_a != ""} {
	append idfile_name $servername_a "." [clock seconds] ".idfile"
	file copy $idfile_a "${CONFIG_DIR}/ids/${idfile_name}"
    }
    
    puts $outfile "set server_name $servername_a"
    puts $outfile "dict set servers \$server_name hostname    \"${hostname_a}\""
    puts $outfile "dict set servers \$server_name port        \"${port_a}\""
    puts $outfile "dict set servers \$server_name username    \"${username_a}\""
    puts $outfile "dict set servers \$server_name password    \"${password_a}\""
    puts $outfile "dict set servers \$server_name idfile      \"${idfile_name}\""
    puts $outfile "dict set servers \$server_name passphrase  \"${passphrase_a}\""

    close $outfile
    puts "${RED_S}Server ${servername_a} is added.${COLOR_E}"
    return 1    
}

# delete server
proc del_server {server} {
    global RED_S
    global COLOR_E
    global CONFIG_DIR
    
    set servers [get_server_config]

    set really_del_server_name -1
    
    # check if is number
    if { [isnumeric $server] } {
	set i 0
	dict for {servername info} $servers {
	    if {$i eq $server} {
		set really_del_server_name $servername
		puts -nonewline "${RED_S}Warning: Really delete ${servername} ?(Y/n):"
		flush stdout
		set overwrite [gets stdin]
	
		if {$overwrite != "Y" && $overwrite != "y"} {
		    puts "${RED_S}Cancled.${COLOR_E}"
		    return 0
		}
		
		break
	    }
	    
	    incr i
	}
    } else {
	if {[dict exists $server]} {
	    set really_del_server_name $server
	}
    }

    if { $really_del_server_name == -1} {
	puts "${RED_S}Error: ${really_del_server_name} not found!";
	return 0
    }
    
    # delete it
    set outfile [open "$CONFIG_DIR/config.tcl" w]
    
    dict for {servername info} $servers {
	dict with info {
	    if {$servername == $really_del_server_name} {
		continue
	    }
	    
	    puts $outfile "set server_name $servername"
	    puts $outfile "dict set servers \$server_name hostname    \"${hostname}\""
	    puts $outfile "dict set servers \$server_name port        \"${port}\""
	    puts $outfile "dict set servers \$server_name username    \"${username}\""
	    puts $outfile "dict set servers \$server_name password    \"${password}\""
	    puts $outfile "dict set servers \$server_name idfile      \"${idfile}\""
	    puts $outfile "dict set servers \$server_name passphrase  \"${passphrase}\""
	}
    }

    close $outfile
    puts "${RED_S}Deleted ${really_del_server_name} ok.${COLOR_E}"
    return 1
}

proc generate_config {} {
    global SSH_IDS_DIR
    global CONFIG_DIR
    
    ## mkdir ~/.sa/ids
    if {![file exists $SSH_IDS_DIR]} {
	file mkdir $SSH_IDS_DIR
    }    
    
    ## put to ~/.sa/config.tcl
    set outfile [open "$CONFIG_DIR/config.tcl" w+]

    puts $outfile "## server configs"
    puts $outfile "## hostname    \"127.0.0.1\""
    puts $outfile "## port        \"22\""
    puts $outfile "## username    \"root\""
    puts $outfile "## password    \"toor\""
    puts $outfile "## idfile      \"ids/1234.pem\""
    puts $outfile "## passphrase  \"\"\n"

    puts $outfile "# example.me"
    puts $outfile "set server_name example.me"
    puts $outfile "dict set servers \$server_name hostname    \"127.0.0.1\""
    puts $outfile "dict set servers \$server_name port        \"22\""
    puts $outfile "dict set servers \$server_name username    \"root\""
    puts $outfile "dict set servers \$server_name password    \"toor\""
    puts $outfile "dict set servers \$server_name idfile      \"\""
    puts $outfile "dict set servers \$server_name passphrase  \"\"\n\n"

    puts $outfile "# example.tbj"
    puts $outfile "set server_name example.tbj"
    puts $outfile "dict set servers \$server_name hostname    \"127.0.0.1\""
    puts $outfile "dict set servers \$server_name port        \"22\""
    puts $outfile "dict set servers \$server_name username    \"root\""
    puts $outfile "dict set servers \$server_name password    \"\""
    puts $outfile "dict set servers \$server_name idfile      \"ids/example.pem\""
    puts $outfile "dict set servers \$server_name passphrase  \"toor\""

    close $outfile
    
    return 1
}

## list all servers
proc list_s {} {
    global RED_S
    global WHITE_S
    global COLOR_E

    set servers [get_server_config]
    
    set tab "    "

    puts ""
    puts "${WHITE_S}Listing entries:${COLOR_E}\n"

    set i 0
    dict for {id info} $servers {
	dict with info {
	    puts "${RED_S}${tab}${i}. ${id}${COLOR_E} -> ${username}@${hostname}:${port}"
	    incr i
	}
    }

    puts ""
}

proc get_ssh_command {} {
    global SSH_COMMAND

    if {[auto_execok zssh] != ""} {
	set SSH_COMMAND "zssh"
	return 1
    }

    if {[auto_execok ssh] != ""} {
	set SSH_COMMAND "ssh"
	return 1
    }

    return 0
}

proc login_interact {hostname port username password idfile passphrase} {
    global SSH_COMMAND
    global RED_S
    global COLOR_E

    if {[get_ssh_command] == 0} {
	puts "${RED_S}Error: Can't find ssh command, please install zssh or ssh tool...."
	return 0
    }

    set timeout 5
    
    if {$idfile eq ""} {
	spawn $SSH_COMMAND -oStrictHostKeyChecking=no -oCheckHostIP=no $username@$hostname -p $port
	expect {
	    "*?assword:*" { send "${password}\r\r";interact }
	    timeout { puts "Timeout..."; return 0 }
	    eof { return 0 }	   
	}
	
	return 1
    }

    global SSH_IDS_DIR

    # has id file
    set path "$SSH_IDS_DIR/${idfile}"
    spawn $SSH_COMMAND  -oStrictHostKeyChecking=no -oCheckHostIP=no $username@$hostname -p $port -i $path
    expect {
	"*?\'$path\':*" {send "${passphrase}\r\r";interact}
	timeout { puts "Timeout..."; return 0 }
	eof { return 0}	
    }    
    
    return 1
}

proc select_and_login_interact {} {
    global WHITE_S
    global RED_S
    global COLOR_E

    while 1 {
	# list servers
	list_s
	
	puts -nonewline "${WHITE_S}\[Q/q for exit\] Select: ${COLOR_E}"
	flush stdout

	set index [gets stdin]

	if { $index == "q" || $index == "Q" || $index == "exit"} {
	    puts ""
	    puts "${RED_S}Exited...${COLOR_E}"
	    return 1
	}

	if {[scan $index {%[0-9]} m]} {
	    select_and_login $index
	}	
    }
    
    return 1
}

proc select_and_login {index} {
    set i 0
    set has 0
    set servers [get_server_config]
    
    dict for {id info} $servers {
	if {$i eq $index} {
	    dict with info {
		login_interact $hostname $port $username $password $idfile $passphrase
	    }

	    set has 1
	    break
	}
	
	incr i
    }

    if {$has == 0} {
	return 0
    }
    
    return 1
}

proc update {} {
    global CONFIG_DIR
    global RED_S
    global COLOR_E

    if {![file exists $::env(HOME)/bin/sa]} {
	puts "${RED_S}Error: ${::env(HOME)}/bin/sa not exists, please install first."
	return 0
    }

    # delete first
    file delete -force $::env(HOME)/bin/sa

    set curr_dir [pwd]
    
    # paste it 
    puts "Info: copying main execute file to ${::env(HOME)}/bin..."
    file copy -force $curr_dir/sa ${::env(HOME)}/bin/sa
    puts "Done.\n"

    return 1
}

proc install {} {
    global CONFIG_DIR
    global RED_S
    global COLOR_E

    ## check dependencies
    if {[auto_execok ssh] == ""} {
	puts "${RED_S}Error: ssh command not installed, please install it first...${COLOR_E}"
	return 0
    } else {
	puts "ssh command installed, ok..."
    }

    if {[auto_execok zssh] == ""} {
	puts "${RED_S}Warning: zssh command not installed, will not support rz/sz...${COLOR_E}"
    } else {
	puts "zssh command installed, ok..."
    }

    set curr_dir [pwd]
    
    if {![file exists $CONFIG_DIR]} {
	puts "Info: initial configures..."
	generate_config
	puts "Done."
    }

    ## do copy config.tcl
    if {[file exists $curr_dir/config.tcl]} {
	## do backup
	if {[file exists ${CONFIG_DIR}/config.tcl]} {
	    puts "Warning: ${CONFIG_DIR}/config.tcl is already exists, backuping it to ${CONFIG_DIR}/config.tcl.bak..."

	    if {[file exists ${CONFIG_DIR}/config.tcl.bak]} {
		file delete -force $CONFIG_DIR/config.tcl.bak
	    }
	    
	    file copy -force ${CONFIG_DIR}/config.tcl ${CONFIG_DIR}/config.tcl.bak
	    puts "Done."
	}

	## copy config to home dir
	puts "Info: copying current config.tcl to ${CONFIG_DIR}/config.tcl..."
	file delete -force $CONFIG_DIR/config.tcl
	file copy -force $curr_dir/config.tcl $CONFIG_DIR/config.tcl
	puts "Done."
    }    

    ## do copy ids
    if {[file exists $curr_dir/ids]} {
	## do backup
	if {[file exists ${CONFIG_DIR}/ids]} {
	    puts "Warning: ${CONFIG_DIR}/ids is already exists, backuping it to ${CONFIG_DIR}/ids.bak... "

	    if {[file exists ${CONFIG_DIR}/ids.bak]} {
		file delete -force $CONFIG_DIR/ids.bak
	    }
	    
	    file copy -force ${CONFIG_DIR}/ids ${CONFIG_DIR}/ids.bak
	    puts "Done."
	}

	## copy config to home dir
	puts "Info: copying current ids directory to ${CONFIG_DIR}/ids..."
	file delete -force $CONFIG_DIR/ids
	file copy -force $curr_dir/ids $CONFIG_DIR/ids	
	puts "Done."
    }

    if {![file exists $::env(HOME)/bin]} {
	puts "Info: creating $::env(HOME)/bin directory..."
	file mkdir $::env(HOME)/bin
	puts "Done."
    }
    
    if {[file exists $::env(HOME)/bin/sa]} {
	puts "${RED_S}Error: ${::env(HOME)}/bin/sa already exists, you should delete it by yourself, stoped."
	return 0
    }

    puts "Info: copying main execute file to ${::env(HOME)}/bin..."
    file copy -force $curr_dir/sa ${::env(HOME)}/bin/sa
    puts "Done.\n"

    puts "Install Successful."
    puts "Note. Don't forget to seting your environment: export PATH=${::env(HOME)}/bin:\$PATH"

    return 1
}

proc target {file_name} {
    global CONFIG_DIR

    set servers [get_server_config]
    
    set curr_dir [file dirname [file normalize [info script]]]

    puts "Packing..."

    set ids_list {}
    
    dict for {servername info} $servers {
	dict with info {
	    if {$idfile != ""} {
		set id_name "ids/"
		append id_name $idfile
	        lappend ids_list $id_name
	    }	    
	}
    }

    exec tar -czf $file_name -C $CONFIG_DIR config.tcl {*}$ids_list -C $curr_dir sa
    puts "Done."

    return 1
}

proc show_usage {} {
    puts "Usages:"
    puts "    -h/--help         show help message"
    
    puts "    -l/--list         list server entries, eg: sa -l"

    puts "    -s/--select       select and login to the index of server, eg: sa -s 1\n"

    puts "    -a/--add          add a server to config, eg:"
    puts "                      sa -a servername ip port username password \[idfile\] \[passphrase\]\n"

    puts "    -d/--delete       delete a server to config, eg:"
    puts "                      sa -d 1: delete the server which index is 1"
    puts "                      sa -d example.tbj: delete the server which name is example.tbj\n"
    
    puts "    -t/--target       export configs and target to a tgz file, eg: sa -t /home/drons/sa.tgz\n"

    puts "    -i/--install      do install"
    puts "    -u/--update       do update\n"
    
    puts "Note: Default config directory is $::env(HOME)/.sa, you can configure it by yourself."
    puts "Dependency: zssh, expect\n"

    return 1
}

proc check_args {argc argv} {
    if {$argc < 1} {
	return 0
    }

    if {[lindex $argv 0] != "l" && [lindex $argv 0] != "i"} {
	return 0
    }

    if {[lindex $argv 0] == "i" && $argc < 2} {
	return 0
    }

    return 1
}

proc get_server_config {} {
    global CONFIG_DIR
    global RED_S
    global COLOR_E
    
    ## reading config file
    if {![file exists $CONFIG_DIR/config.tcl]} {
	return [dict create]
    }

    source $CONFIG_DIR/config.tcl

    if { ![info exists servers] } {
	return [dict create]
    }
    
    return $servers
}

proc main {argc argv} {
    global CONFIG_DIR
    global SSH_IDS_DIR
    global RED_S
    global COLOR_E
    
    if {$argc < 1} {
	return [select_and_login_interact]
    }

    if {[scan [lindex $argv 0] {%[0-9]} m]} {
	return [select_and_login [lindex $argv 0]]
    }
    
    switch [lindex $argv 0] {
	"-h" -
	"--help" {
	    show_usage
	    return 0
	}

	"-t" -
	"--target" {
	    if {$argc < 2} {
		show_usage
		return 0
	    }
	    return [target [lindex $argv 1]]
	}

	"-i" -
	"--install" {
	    return [install]
	}

	"-u" -
	"--update" {
	    return [update]
	}

	"-a" -
	"--add" {
	    if {$argc < 6} {
		show_usage
		return 0
	    }
	    
	    set servername [lindex $argv 1]
	    set hostname   [lindex $argv 2]
	    set port       [lindex $argv 3]
	    set username   [lindex $argv 4]
	    set password   [lindex $argv 5]
	    set idfile     [lindex $argv 6]
	    set passphrase [lindex $argv 7]

	    if {$idfile != "" && ![file exists $idfile]} {
		puts "${RED_S}Error: id file not found.${COLOR_E}"
		return 0
	    }

	    return [add_server $servername $hostname $port $username $password $idfile $passphrase]
	}

	"-d" -
	"--delete" {
	    if {$argc < 2} {
		show_usage
		return 0
	    }

	    return [del_server [lindex $argv 1]]
	}

	"-l" -
	"--list" {
	    return [list_s]	
	}

	"-s" -
	"--select" {
	    if {$argc < 2} {
		show_usage
		return 0
	    }
	    return [select_and_login [lindex $argv 1]]
	}

	default {
	    puts "Invalid arguments."
	    show_usage
	    return 0
	}
    }
}

main $argc $argv
